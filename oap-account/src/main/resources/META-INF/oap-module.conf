name = oap-account
dependsOn = [
  oap
  oap-http
  oap-ws
  oap-ws-api-ws
  oap-ws-sso-api
  oap-ws-admin-ws
  oap-ws-openapi-ws
  oap-mail
  oap-mail-mongo
  oap-storage-mongo
  oap-account-social
  oap-remote
  oap-http
  oap-http-prometheus
]
services {
  organization-storage {
    implementation = oap.ws.account.OrganizationStorage
    parameters {
      uniqueName = <services.self.name>
      defaultOrganizationId = DFLT
      defaultOrganizationName = Default
      defaultOrganizationDescription = Default organization
      defaultOrganizationReadOnly = true
    }
    supervision.supervise = true
  }

  organization-persistence {
    implementation = oap.storage.MongoPersistence
    parameters {
      uniqueName = <services.self.name>
      mongoClient: <modules.oap-storage-mongo.mongo-client>
      collectionName = organizations
      delay = 1m
      storage = <modules.this.organization-storage>
      watch = true
      crashDumpPath = <change me>
    }
    supervision.supervise = true
  }

  user-storage {
    implementation = oap.ws.account.UserStorage
    parameters {
      uniqueName = <services.self.name>
      defaultSystemAdminEmail = "xenoss@xenoss.io"
      defaultSystemAdminPassword = Xenoss123
      defaultSystemAdminFirstName = System
      defaultSystemAdminLastName = Admin
      defaultSystemAdminRoles = {DFLT: ADMIN, SYSTEM: ADMIN}
      defaultSystemAdminReadOnly = true
    }
    supervision.supervise = true
  }

  user-persistence {
    implementation = oap.storage.MongoPersistence
    parameters {
      uniqueName = <services.self.name>
      mongoClient = <modules.oap-storage-mongo.mongo-client>
      collectionName = users
      delay = 1m
      storage = <modules.this.user-storage>
      watch = true
      crashDumpPath = <change me>
    }
    supervision.supervise = true
  }

  oap-ws-sso-token-extractor {
    implementation = oap.ws.sso.JWTExtractor
    parameters {
      secret = <change me>
      issuer = <change me>
      roles = <modules.oap-ws-sso-api.oap-ws-sso-roles>
    }
  }

  default-user-provider {
    implementation = oap.ws.account.DefaultUserProvider
    parameters {
      userStorage = <modules.this.user-storage>
      jwtExtractor = <modules.this.oap-ws-sso-token-extractor>
      jwtTokenGenerator = <modules.this.jwt-token-generator>
      sessionManager = <modules.oap-ws.session-manager>
      roles = <modules.oap-ws-sso-api.oap-ws-sso-roles>
      useOrganizationLogin = true
    }
  }

  jwt-token-generator {
    implementation = oap.ws.sso.JwtTokenGenerator
    parameters {
      accessSecret = <change me>
      refreshSecret = <change me>
      issuer = <change me>
      accessSecretExpiration = 2m
      refreshSecretExpiration = 30d
    }
  }

  oap-ws-sso-token-extractor {
    implementation = oap.ws.sso.JWTExtractor
    parameters {
      secret = <change me>
      issuer = <change me>
      roles = <modules.oap-ws-sso-api.oap-ws-sso-roles>
    }
  }

  oap-ws-sso-authenticator {
    implementation = oap.ws.account.JwtUserAuthenticator
    parameters {
      userProvider = <modules.this.default-user-provider>
      userStorage = <modules.this.user-storage>
      jwtTokenGenerator = <modules.this.jwt-token-generator>
      jwtExtractor = <modules.this.oap-ws-sso-token-extractor>
    }
  }

  account-mailman {
    implementation = oap.ws.account.AccountMailman
    parameters {
      mailman = <modules.oap-mail.oap-mail-mailman>
      fromPersonal = <change me>
      fromEmail = <change me>
      confirmUrl = <change me>
    }
  }

  in-memory-token-service {
    implementation = oap.ws.account.utils.InMemoryTokenService
  }

  organization-ws {
    implementation = oap.ws.account.OrganizationWS
    parameters {
      organizationStorage = <modules.this.organization-storage>
      userStorage = <modules.this.user-storage>
      mailman = <modules.this.account-mailman>
      selfRegistrationEnabled = true
      oauthService = <modules.oap-account-social.oauth-service>
      recoveryTokenService = <modules.this.in-memory-token-service>
      roles = <modules.oap-ws-sso-api.oap-ws-sso-roles>
    }
    ws-service {
      path = organizations
      sessionAware = true
      interceptors = [
        oap-ws-sso-api.oap-ws-sso-api-key-interceptor
        oap-ws-sso-api.oap-ws-sso-jwt-security-interceptor
      ]
    }
  }

  user-ws {
    implementation = oap.ws.account.UserWS
    parameters {
      userStorage = <modules.this.user-storage>
    }
    ws-service {
      path = user
      sessionAware = true
      interceptors = oap-ws-sso-api.oap-ws-sso-jwt-security-interceptor
    }
  }

  admin-ws {
    implementation = oap.ws.account.AdminWS
    parameters {
      userStorage = <modules.this.user-storage>
      organizationStorage = <modules.this.organization-storage>
    }
    ws-service {
      path = admin
      port = httpprivate
    }
  }

  auth-ws {
    implementation = oap.ws.account.AuthWS
    parameters {
      authenticator = <modules.this.oap-ws-sso-authenticator>
      sessionManager = <modules.oap-ws.session-manager>
      oauthService = <modules.oap-account-social.oauth-service>
      userStorage = <modules.this.user-storage>
    }
    ws-service {
      path = auth
      sessionAware = true
      interceptors = [
        oap-ws-sso-api.oap-ws-sso-jwt-security-interceptor
        oap-ws-sso-api.oap-ws-sso-throttle-login-interceptor
      ]
    }
  }

  refresh-ws {
    implementation = oap.ws.account.RefreshWS
    parameters {
      authenticator = <modules.this.oap-ws-sso-authenticator>
      sessionManager = <modules.oap-ws.session-manager>
      oauthService = <modules.oap-account-social.oauth-service>
    }
    ws-service {
      path = refresh
      sessionAware = true
      interceptors = [
        oap-ws-sso-api.oap-ws-sso-throttle-login-interceptor
      ]
    }
  }

  xenoss-account-user-storage-metrics {
    implementation = oap.storage.StorageMetrics
    parameters {
      storage = <modules.this.user-storage>
      name = "xenoss-account.users"
    }
  }

  xenoss-account-org-storage-metrics {
    implementation = oap.storage.StorageMetrics
    parameters {
      storage = <modules.this.organization-storage>
      name = "xenoss-account.organizations"
    }
  }

}

configurations = [
  {
    loader = oap.json.TypeIdFactory
    config = {
      organization = oap.ws.account.OrganizationData
      user = oap.ws.account.UserData
    }
  }
]
